import pandas as pd
import streamlit as st
from datetime import date

from data_processing import load_data, process_data
from functions import date_ago, convert_date, get_gradient_color, get_current_previous_sums,  hex_to_rgb, \
    interpolate_color, gradient_color_func, calculate_mean_max_subs, calculate_mean_posts, calculate_mean_views, \
    calculate_mean_reacts, load_stopwords_from_file
from fig_posts_inds import create_fig_posts_inds
from fig_subs_inds import create_fig_subs_inds
from fig_heatmap import create_heatmap
from fig_subs_pos_neg import create_subs_pos_neg, create_slider
from fig_bubble import create_bubble_fig
from fig_table_views import create_table
from fig_image import make_image, prepare_data

channels, posts, reactions, subscribers, views = load_data()
processed_data = process_data(channels, posts, reactions, subscribers, views)

st.set_page_config(layout="wide", page_icon="üÖ¢",)
# –°—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
st.markdown("""
<style>
    .title h1 {
        font-family: 'Open Sans', sans-serif;
        font-size: 28px;
        line-height: 36px;
        color: #333;
        background-color: #ffb347;
        padding: 0px;
        box-shadow: 0 10px 15px rgba(0,0,0,0.05);
        border-radius: 10px;
        text-align: left;
    }
    .subheader h2 {
        font-family: 'Open Sans', sans-serif;
        font-size: 16px;
        background-color: #ffb347;
        line-height: 24px;
        color: #666;
        margin-top: 0px;
        margin-bottom: 0px;
        font-weight: bold;
    }

    .custom-text { color: #666; 
                   font-size: 13px; 
                   } 
    .custom-number { color: brown; 
                     font-weight: bold; 
                     font-size: 17px; }
    
    .stApp {
        max-width: 1200px;
        margin: 0 auto;
        background-color: #ffb347;
        padding: 0rem;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    .button-container {
        display: flex;
        justify-content: flex-start;
        gap: 0px;
        margin-bottom: 0px;
    }
    .stButton > button {
        background-color: #ffb347;
        border-color: #f5dfbf;
        color: #666;
        border: 2px solid #f5dfbf;
        border-radius: 20px;
        padding: 0px 8px;
        font-size: 8px;
        font-weight: 200;
        white-space: nowrap; 
        font-family: 'Roboto', sans-serif;
    }
    .stButton > button:hover {
        background-color: #f5dfbf;
        border-color: #f5dfbf;
        color: #666;
    }
    .stButton > button:active {
        background-color: #f5dfbf;
        border-color: #f5dfbf;
        color: #666;
    }
</style>
""", unsafe_allow_html=True)




def main():
    
    posts = processed_data['posts']
    subs = processed_data['subs']
    gr_pvr = processed_data['gr_pvr']
    post_view = processed_data['post_view']
    
    col1, col2 = st.columns(2)
    with col1:
         # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown('<div class="title"><h1>Simulative</h1></div>', unsafe_allow_html=True)
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown('<div class="subheader"><h2>–î–∞—à–±–æ—Ä–¥ –ø–æ –∞–Ω–∞–ª–∏–∑—É Telegram-–∫–∞–Ω–∞–ª–æ–≤</h2></div>', unsafe_allow_html=True)
        # –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        channels_list = processed_data['posts']['channel_name'].unique()
        selected_channel = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:', channels_list)
    with col2:
        if selected_channel:
            df_words = prepare_data(posts, selected_channel)
            image = make_image(df_words)
            st.image(image, use_column_width=True)

    mean_subs_pos, mean_subs_neg, max_subs_pos, max_subs_neg = calculate_mean_max_subs(subs, selected_channel)
    mean_posts_day, mean_posts_week, mean_posts_month = calculate_mean_posts(posts, selected_channel)
    mean_views = calculate_mean_views(post_view, selected_channel)
    mean_reacts, mean_idx, react1, perc1, react2, perc2, react3, perc3 = calculate_mean_reacts(gr_pvr, selected_channel)
    
    fig_posts = create_fig_posts_inds(posts, selected_channel)
    fig_subs = create_fig_subs_inds(subs, selected_channel)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    if 'button_state' not in st.session_state:
        st.session_state.button_state = "all (6–º)"

    # –°—Ç–∏–ª–∏ –¥–ª—è —á–∏—Å–µ–ª
    metric_styles = {
        "color": "#3366CC",
        "fontWeight": "bold",
        "fontSize": "20px"
    }
    
    st.markdown(
        """
        <style>
            .row {
                display: flex;
                margin-bottom: 40px;
            }
            .column {
                width: 22%;
                height: 100%;
                margin-right: 30px;
            }
            .last-column {
                margin-left: 30px;
            }
        </style>
        """, unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns([1, 1, 1, 1])

    with col1:
        st.write(f'<span class="custom-text"> üìà –°—Ä–µ–¥–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: </span><span class="custom-number">{mean_subs_pos}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üìâ –°—Ä–µ–¥–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—Ç–æ–∫: </span><span class="custom-number">{mean_subs_neg}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç: </span><span class="custom-number">{max_subs_pos}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üÜò –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—Ç–æ–∫: </span><span class="custom-number">{max_subs_neg}</span>', unsafe_allow_html=True)

    with col2:
        st.write(f'<span class="custom-text"> üìã –í —Å—Ä–µ–¥–Ω–µ–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: </span><span class="custom-number">{mean_posts_day}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üìú –í —Å—Ä–µ–¥–Ω–µ–º –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: </span><span class="custom-number">{mean_posts_week}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üóÇÔ∏è –í —Å—Ä–µ–¥–Ω–µ–º –ø–æ—Å—Ç–æ–≤ –≤ –º–µ—Å—è—Ü: </span><span class="custom-number">{mean_posts_month}</span>', unsafe_allow_html=True)

    with col3:
        st.write(f'<span class="custom-text"> üëÄ –í —Å—Ä–µ–¥–Ω–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: </span><span class="custom-number">{mean_views}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üêæ –í —Å—Ä–µ–¥–Ω–µ–º —Ä–µ–∞–∫—Ü–∏–π: </span><span class="custom-number">{mean_reacts}</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> üíé –í —Å—Ä–µ–¥–Ω–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: </span><span class="custom-number">{mean_idx}%</span>', unsafe_allow_html=True)

    with col4:
        st.write(f'<span class="custom-text"> ü•á –î–æ–ª—è —Ä–µ–∞–∫—Ü–∏–∏ {react1}: </span><span class="custom-number">{perc1}%</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> ü•à –î–æ–ª—è —Ä–µ–∞–∫—Ü–∏–∏ {react2}: </span><span class="custom-number">{perc2}%</span>', unsafe_allow_html=True)
        st.write(f'<span class="custom-text"> ü•â –î–æ–ª—è —Ä–µ–∞–∫—Ü–∏–∏ {react3}: </span><span class="custom-number">{perc3}%</span>', unsafe_allow_html=True)
        
    # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    col1, col2 = st.columns(2)
    with col1:    
        st.plotly_chart(fig_posts, use_container_width=True) 
        # –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–µ–π –ø–æ–¥ —Å–ª–∞–π–¥–µ—Ä–æ–º
        st.markdown(""" <style> .stSlider .st-cl::after { content: ""; } </style> """, unsafe_allow_html=True)
        slider = create_slider(subs, selected_channel)
        fig_subs_pos_neg = create_subs_pos_neg(subs, selected_channel, slider) #, slider
        st.plotly_chart(fig_subs_pos_neg, use_container_width=True)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        st.markdown('<div class="button-container">', unsafe_allow_html=True)
        button_col1, button_col2, button_col3, button_col4, button_col5 = st.columns([0.25, 0.15, 0.15, 0.15, 0.30])
        with button_col1:
            st.empty()          
        with button_col2:
            if st.button("3–¥", key="3db"):
                st.session_state.button_state = "3–¥"
        with button_col3:
            if st.button("1–Ω", key="1wb"):
                st.session_state.button_state = "1–Ω"
        with button_col4:
            if st.button("1–º", key="1mb"):
                st.session_state.button_state = "1–º"
        with button_col5:
            if st.button("all (6–º)", key="6mb"):
                st.session_state.button_state = "all (6–º)"
        st.markdown('</div>', unsafe_allow_html=True)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if st.session_state.button_state == "3–¥":
            filtered_bubble = gr_pvr[(gr_pvr.channel_name == selected_channel)&(pd.to_datetime(gr_pvr.post_datetime.str[:10])>=date_ago('days', 2))]  
        elif st.session_state.button_state == "1–Ω":
            filtered_bubble = gr_pvr[(gr_pvr.channel_name == selected_channel)&(pd.to_datetime(gr_pvr.post_datetime.str[:10])>=date_ago('weeks', 1))]
        elif st.session_state.button_state == "1–º":
            filtered_bubble = gr_pvr[(gr_pvr.channel_name == selected_channel)&(pd.to_datetime(gr_pvr.post_datetime.str[:10])>=date_ago('months', 1))]
        else:  # "all (6–º)"
            filtered_bubble = gr_pvr[(gr_pvr.channel_name == selected_channel)&(pd.to_datetime(gr_pvr.post_datetime.str[:10])>=date_ago('months', 6))]
        
        fig_bubble = create_bubble_fig(filtered_bubble)
        st.plotly_chart(fig_bubble, use_container_width=True)
        
    with col2:
        
        st.plotly_chart(fig_subs, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        st.markdown('<div class="button-container">', unsafe_allow_html=True)
        button_col1, button_col2, button_col3, button_col4, button_col5 = st.columns([0.25, 0.15, 0.15, 0.15, 0.30])
        with button_col1:
            st.empty()          
        with button_col2:
            if st.button("3–¥", key="3d"):
                st.session_state.button_state = "3–¥"
        with button_col3:
            if st.button("1–Ω", key="1w"):
                st.session_state.button_state = "1–Ω"
        with button_col4:
            if st.button("1–º", key="1m"):
                st.session_state.button_state = "1–º"
        with button_col5:
            if st.button("all (6–º)", key="6m"):
                st.session_state.button_state = "all (6–º)"
        st.markdown('</div>', unsafe_allow_html=True)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        if st.session_state.button_state == "3–¥":
            filtered_df = posts[(posts.channel_name == selected_channel) &
                                (pd.to_datetime(posts.date) >= date_ago('days', 2))]
        elif st.session_state.button_state == "1–Ω":
            filtered_df = posts[(posts.channel_name == selected_channel) &
                                (pd.to_datetime(posts.date) >= date_ago('weeks', 1))]
        elif st.session_state.button_state == "1–º":
            filtered_df = posts[(posts.channel_name == selected_channel) &
                                (pd.to_datetime(posts.date) >= date_ago('months', 1))]
        else:  # "all (6–º)"
            filtered_df = posts[(posts.channel_name == selected_channel) &
                                (pd.to_datetime(posts.date) >= date_ago('months', 6))]

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        st.plotly_chart(create_heatmap(filtered_df), use_container_width=True)


    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –ø–æ –¥–Ω—è–º")
        st.write(""" –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π: –µ—Å–ª–∏ –≤ –ø–µ—Ä–≤—ã–µ —Å—É—Ç–∫–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–Ω–∞ —Å–æ–±–∏—Ä–∞–µ—Ç –±–æ–ª–µ–µ 35% –≤—Å–µ—Ö –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, —ç—Ç–æ —É—Å–ø–µ—à–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏; –∏–Ω–∞—á–µ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –∑–∞—Ç–µ—Ä—è–ª–∏—Å—å —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—É—é –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∑–∞ –æ–¥–Ω–∏ —Å—É—Ç–∫–∏ –≤–∏–¥–µ–æ –Ω–∞–±–∏—Ä–∞–µ—Ç 80% –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤, —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ—è–≤–∏—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–æ—Ç—É –ø–æ–¥–æ–±–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π –∏ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã (–ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø—Ä–∏–≤–µ–¥–µ–Ω—ã, –∫–∞–∫ –ø—Ä–∏–º–µ—Ä). """)
        st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", min_value=1, max_value=24, value=5, key="slider_days")
        days_to_show = st.session_state.slider_days
        columns_to_show = ["ID –ø–æ—Å—Ç–∞", "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "–¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã"] + [str(i)+" –¥" for i in range(1, days_to_show+1)]
        
        df = create_table(post_view, days_to_show, selected_channel)
        #def highlight_percentages(s):
        #    is_large = s > 80
        #    return ['background-color: lightgreen' if v else '' for v in is_large]
        
        #styled_df = df.style.apply(highlight_percentages, subset= [str(i)+" –¥" for i in range(1, days_to_show+1)])
        #st.dataframe(styled_df.to_html(), unsafe_allow_html=True)

        st.table(df[columns_to_show])

        #–ü–æ–∏—Å–∫–æ–≤–∏–∫
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ –∏ –¥–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É ID:")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–∑ DataFrame
        post_id = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä ID –ø–æ—Å—Ç–∞:", "")
        if post_id:
            try:
                #row = posts.query(f"'id' == '{post_id}'").iloc[0]
                row = posts[posts.id.astype(str) == post_id].iloc[0, :]
                st.write(f"ID: {row['id']}")
                st.write(f"–î–∞—Ç–∞: {row['date']}")
                st.write(f"–í—Ä–µ–º—è: {row['time']}")
                st.write(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {row['text']}")
                #st.write(f"–î–∞—Ç–∞ –ø–æ—Å—Ç–∞: {row['date']}")
            except IndexError:
                st.error("–ù–æ–º–µ—Ä ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")



if __name__ == "__main__":
    main()


